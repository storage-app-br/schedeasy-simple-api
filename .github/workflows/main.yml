name: CI - sonar cloud

# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

on:
  push:
    branches: ['main']
    # Publish semver tags as releases.
    tags: ['v*.*.*']
  # pull_request:
  #   branches: ['main']

env:
  # Use docker.io for Docker Hub if empty
  REGISTRY: ghcr.io
  # github.repository as <account>/<repo>
  IMAGE_NAME: ${{ github.repository }}
  FOLDER_NAME: ${{ github.event.repository.name }}-app

jobs:
  run-ci:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write
      id-token: write

    defaults:
      run:
        working-directory: ${{ github.workspace }}  # Define o diret√≥rio de trabalho

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build development
        id: build-and-push
        uses: docker/build-push-action@v5
        with:
          context: .
          push: false
          tags: ${{ env.FOLDER_NAME }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          load: true
          file: Dockerfile
          target: development

      - name: up containers
        run: docker compose -f docker-compose.ci.yml up -d

      - name: Wait for PostgreSQL to be ready
        run: |
          echo "Waiting for PostgreSQL to start..."
          for i in {1..30}; do
            if docker compose -f docker-compose.ci.yml exec -T db pg_isready --host=localhost --username=pguser --dbname=permissao; then
              echo "PostgreSQL is ready!"
              exit 0
            fi
            echo "PostgreSQL not ready yet. Retrying in 2 seconds..."
            sleep 2
          done
          echo "PostgreSQL did not start in time."
          exit 1

      - name: generate envs
        run: |
          docker compose -f docker-compose.ci.yml exec -u root -T app cp ./envs/.env.test.example ./envs/.env.test
          docker compose -f docker-compose.ci.yml exec -u root -T app cp ./envs/.env.e2e.example ./envs/.env.e2e

      - name: run unit and integration tests
        run: docker compose -f docker-compose.ci.yml run -T app yarn test --coverage --detectOpenHandles --forceExit || true
      
      - name: SonarQube Scan
        uses: SonarSource/sonarqube-scan-action@v5
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

