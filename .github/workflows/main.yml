name: CI - sonar cloud

on:
  push:
    branches: ['develop']
    tags: ['v*.*.*']

env:
  REGISTRY: docker.io
  IMAGE_NAME: ${{ secrets.DOCKER_USERNAME }}/schedeasy-simple-api
  FOLDER_NAME: ${{ github.event.repository.name }}-app

jobs:
  run-ci:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write
      id-token: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          install: true
          driver: docker-container  # ðŸ”¥ Usa driver compatÃ­vel com cache
          driver-opts: network=host

      - name: Build development
        id: build-and-push
        uses: docker/build-push-action@v5
        with:
          context: .
          push: false
          tags: ${{ env.FOLDER_NAME }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          load: true
          file: Dockerfile
          target: development

      - name: up containers
        run: docker compose -f docker-compose.ci.yml up -d

      - name: Wait for PostgreSQL to be ready
        run: |
          echo "Waiting for PostgreSQL to start..."
          for i in {1..30}; do
            if docker compose -f docker-compose.ci.yml exec -T db pg_isready --host=localhost --username=pguser --dbname=permissao; then
              echo "PostgreSQL is ready!"
              exit 0
            fi
            echo "PostgreSQL not ready yet. Retrying in 2 seconds..."
            sleep 2
          done
          echo "PostgreSQL did not start in time."
          exit 1

      - name: generate envs
        run: |
          docker compose -f docker-compose.ci.yml exec -u root -T app cp ./envs/.env.test.example ./envs/.env.test
          docker compose -f docker-compose.ci.yml exec -u root -T app cp ./envs/.env.e2e.example ./envs/.env.e2e

      - name: run unit and integration tests
        run: docker compose -f docker-compose.ci.yml run -T app yarn test:cov
      
      - uses: SonarSource/sonarqube-scan-action@v4
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

  run-cd:
    runs-on: ubuntu-latest
    needs: run-ci  # SÃ³ executa SE os testes passarem
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and Push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ env.IMAGE_NAME }}:latest,${{ env.IMAGE_NAME }}:${{ github.sha }}

      - name: Setup Kustomize
        uses: imranismail/setup-kustomize@v1
        with: 
          kustomize-version: "5.5.0"

      - name: Update Kubernetes resources
        env:
          DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
        run: |
          cd k8s
          kustomize edit set image node-api=$DOCKER_USERNAME/schedeasy-simple-api:$GITHUB_SHA

      - name: Setup GPG for signed commits
        run: |
          echo "$GPG_PRIVATE_KEY" | gpg --batch --import
          GPG_KEY_ID=$(gpg --list-secret-keys --keyid-format LONG | grep 'sec' | awk '{print $2}' | cut -d'/' -f2)
          git config --global user.signingkey "$GPG_KEY_ID"
          git config --global commit.gpgsign true
        env:
          GPG_PRIVATE_KEY: ${{ secrets.GPG_PRIVATE_KEY }}

      - name: Commit changes
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add .
          git commit -S -m "Bump docker version"

      - name: Push changes
        uses: ad-m/github-push-action@master
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          repository: storage-app-br/schedeasy-simple-api
